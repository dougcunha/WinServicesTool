name: Tests

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  DOTNET_VERSION: '10.0.x'
  TEST_PROJECT_PATH: 'tests/WinServicesTool.Tests/WinServicesTool.Tests.csproj'

jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.TEST_PROJECT_PATH }}

    - name: Build tests
      run: dotnet build ${{ env.TEST_PROJECT_PATH }} -c Debug --no-restore

    - name: Run tests with coverage
      shell: pwsh
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} `
          -c Debug `
          --no-build `
          --verbosity normal `
          --logger "trx;LogFileName=test-results.trx" `
          --collect:"XPlat Code Coverage" `
          --results-directory ./TestResults

    - name: Generate coverage report
      if: always()
      shell: pwsh
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        
        $coverageFiles = Get-ChildItem -Path ./TestResults -Filter "coverage.cobertura.xml" -Recurse
        if ($coverageFiles.Count -gt 0) {
          $coveragePath = $coverageFiles[0].FullName
          reportgenerator `
            -reports:$coveragePath `
            -targetdir:./CoverageReport `
            -reporttypes:"Html;MarkdownSummaryGithub" `
            -verbosity:Warning
          
          # Adiciona o relatório ao step summary
          if (Test-Path ./CoverageReport/SummaryGithub.md) {
            Get-Content ./CoverageReport/SummaryGithub.md >> $env:GITHUB_STEP_SUMMARY
          }
        } else {
          echo "⚠️ No coverage file found" >> $env:GITHUB_STEP_SUMMARY
        }

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults/*.trx
        retention-days: 30

    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: CoverageReport/
        retention-days: 30

    - name: Test summary
      if: always()
      shell: pwsh
      run: |
        echo "## 🧪 Test Results" >> $env:GITHUB_STEP_SUMMARY
        
        $trxFiles = Get-ChildItem -Path ./TestResults -Filter "*.trx" -Recurse
        if ($trxFiles.Count -gt 0) {
          [xml]$trx = Get-Content $trxFiles[0].FullName
          $counters = $trx.TestRun.ResultSummary.Counters
          
          $total = $counters.total
          $passed = $counters.passed
          $failed = $counters.failed
          $skipped = $counters.notExecuted
          
          echo "- ✅ **Passed:** $passed" >> $env:GITHUB_STEP_SUMMARY
          echo "- ❌ **Failed:** $failed" >> $env:GITHUB_STEP_SUMMARY
          echo "- ⏭️ **Skipped:** $skipped" >> $env:GITHUB_STEP_SUMMARY
          echo "- 📊 **Total:** $total" >> $env:GITHUB_STEP_SUMMARY
          
          if ($failed -gt 0) {
            echo "" >> $env:GITHUB_STEP_SUMMARY
            echo "### ❌ Failed Tests" >> $env:GITHUB_STEP_SUMMARY
            $failedTests = $trx.TestRun.Results.UnitTestResult | Where-Object { $_.outcome -eq "Failed" }
            foreach ($test in $failedTests) {
              echo "- **$($test.testName)**" >> $env:GITHUB_STEP_SUMMARY
              if ($test.Output.ErrorInfo.Message) {
                echo "  ``````" >> $env:GITHUB_STEP_SUMMARY
                echo "  $($test.Output.ErrorInfo.Message)" >> $env:GITHUB_STEP_SUMMARY
                echo "  ``````" >> $env:GITHUB_STEP_SUMMARY
              }
            }
          }
        } else {
          echo "⚠️ No test results found" >> $env:GITHUB_STEP_SUMMARY
        }

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summaryPath = './CoverageReport/SummaryGithub.md';
          
          if (fs.existsSync(summaryPath)) {
            const summary = fs.readFileSync(summaryPath, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Code Coverage Report\n\n${summary}\n\n_Generated by [ReportGenerator](https://github.com/danielpalme/ReportGenerator)_`
            });
          }
